----- CREAR PROYECTO -----
symfony new --webapp nombre_proyecto  ---------> CREAMOS PROYECTO DE SYMFONY
symfony server:start --------------------------> INICIAMOS SERVIDOR DE SYMFONY

----- INSTALAR PAQUETES -----
composer require --dev symfony/maker-bundle --dev---> PARA ACTUALIZAR PAQUETES
composer require symfony/orm-pack -------------> PARA ACTUALIZAR PAQUETES
composer require twig -------------------------> PARA ACTUALIZAR PAQUETES
composer require security ---------------------> PARA ACTUALIZAR PAQUETES
composer require form validator ---------------> PARA ACTUALIZAR PAQUETES
symfony composer require api ------------------> INSTALAR API PLATFORM

----- COMANDOS PARA LA BD -----
Entrar al proyecto y cambiar el .env y añadir la siguiente linea:
DATABASE_URL="mysql://root:@127.0.0.1:3306/examen"
php bin/console doctrine:database:create ------> CREAMOS LA BASE DE DATOS
php bin/console make:migration ----------------> HACEMOS LA MIGRACION
php bin/console doctrine:migrations:migrate ---> CONFIRMAMOS LA MIGRACION
php bin/console doctrine:schema:update --complete --force ---> ACTUALIZA TODA LA BD
composer update ------> CUANDO COGES UN PROYECTO EXTERNO HAY QUE PONER ESTO

----- COMANDOS PARA CREAR EL PROYECTO ¿¿¿¿¿¿¿ MIRAR ABAJO !!!!!!!-----
php bin/console make:entity -------------------> CREAMOS UNA ENTIDAD EN EL PROGRAMA
php bin/console make:crud ---------------------> ES PARA UTILIZAR LAS FUNCIONALIDADES QUE TIENE UNA BD
php bin/console make:controller ---------------> CREA UN CONTROLLER
php bin/console make:user ---------------------> CREA REPOSITORIOS
php bin/console make:auth ---------------------> CREA UN LOGIN
php bin/console make:registration-form --------> CREA UN FORMULARIO DE REGISTRO

//PONER EN .ENV
DATABASE_URL="mysql://root@127.0.0.1:3306/nombre de la base de datos"

CADA VEZ QUE SE QUIERA INSERTAR ALGO EN LA BD SE DEBE HACER UN MIGRATION Y SU CONFIRMACION



php bin/console make:user
php bin/console make:auth
php bin/console make:registration-form
php bin/console doctrine:database:create
php bin/console make:entity
php bin/console make:crud


symfony server:start 

php bin/console make:crud message
			  thread
			  Fórum







dejo una copia de los comandos que he puesto justo después de instalar los paquetes, con los respectivos mensajes:
PS C:\Users\Jacin\nuevo_proyecto> php bin/console make:user

 The name of the security user class (e.g. User) [User]:
 >     

 Do you want to store user data in the database (via Doctrine)? (yes/no) [yes]:
 > 

 Enter a property name that will be the unique "display" name for the user (e.g. email, username, uuid) [email]:
 > username

 Will this app need to hash/check user passwords? Choose No if passwords are not needed or will be checked/hashed by some other system (e.g. a single sign-on server).

 Does this app need to hash/check user passwords? (yes/no) [yes]:
 >

 created: src/Entity/User.php
 created: src/Repository/UserRepository.php
 updated: src/Entity/User.php
 updated: config/packages/security.yaml

 
  Success! 
 

 Next Steps:
   - Review your new App\Entity\User class.
   - Use make:entity to add more fields to your User entity and then run make:migration.
   - Create a way to authenticate! See https://symfony.com/doc/current/security.html
PS C:\Users\Jacin\nuevo_proyecto> php bin/console make:auth

 !
 ! [CAUTION] "make:auth" is deprecated, use any of the "make:security" commands instead.                                
 !                                                                                                                      

 What style of authentication do you want? [Empty authenticator]:
  [0] Empty authenticator
  [1] Login form authenticator
 > 1

 The class name of the authenticator to create (e.g. AppCustomAuthenticator):
 > UserAuthenticator

 Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
 >

 Do you want to generate a '/logout' URL? (yes/no) [yes]:
 >

 Do you want to support remember me? (yes/no) [yes]:
 >

 How should remember me be activated? [Activate when the user checks a box]:
  [0] Activate when the user checks a box
  [1] Always activate remember me
 >

 created: src/Security/UserAuthenticator.php
 updated: config/packages/security.yaml
 created: src/Controller/SecurityController.php
 created: templates/security/login.html.twig

 
  Success! 
 

 Next:
 - Customize your new authenticator.
 - Finish the redirect "TODO" in the App\Security\UserAuthenticator::onAuthenticationSuccess() method.
 - Review & adapt the login template: templates/security/login.html.twig.
PS C:\Users\Jacin\nuevo_proyecto> php bin/console make:registration-form
 Creating a registration form for App\Entity\User

 Do you want to add a #[UniqueEntity] validation attribute to your User class to make sure duplicate accounts aren't created? (yes/no) [yes]:
 >

 Do you want to send an email to verify the user's email address after registration? (yes/no) [yes]:
 > no

 Do you want to automatically authenticate the user after registration? (yes/no) [yes]:
 > no

 What route should the user be redirected to after registration?:
  [0 ] api_genid
  [1 ] api_errors
  [2 ] api_validation_errors
  [3 ] api_entrypoint
  [4 ] api_doc
  [5 ] api_jsonld_context
  [6 ] _api_validation_errors_problem
  [7 ] _api_validation_errors_hydra
  [8 ] _api_validation_errors_jsonapi
  [9 ] _preview_error
  [10] _wdt_stylesheet
  [11] _wdt
  [12] _profiler_home
  [13] _profiler_search
  [14] _profiler_search_bar
  [15] _profiler_phpinfo
  [16] _profiler_xdebug
  [17] _profiler_font
  [18] _profiler_search_results
  [19] _profiler_open_file
  [20] _profiler
  [21] _profiler_router
  [22] _profiler_exception
  [23] _profiler_exception_css
  [24] app_login
  [25] app_logout
 > 24

 Do you want to generate PHPUnit tests? [Experimental] (yes/no) [no]:
 >

 updated: src/Entity/User.php
 created: src/Form/RegistrationFormType.php
 created: src/Controller/RegistrationController.php
 created: templates/registration/register.html.twig

 
  Success! 
 

 Next:
 Make any changes you need to the form, controller & template.

 Then open your browser, go to "/register" and enjoy your new form!

PS C:\Users\Jacin\nuevo_proyecto> php bin/console doctrine:database:create
Could not create database `examen` for connection named default
An exception occurred while executing a query: SQLSTATE[HY000]: General error: 1007 Can't create database 'examen'; database exists
PS C:\Users\Jacin\nuevo_proyecto> php bin/console doctrine:database:create
Created database `examen` for connection named default
PS C:\Users\Jacin\nuevo_proyecto> php bin/console make:entity

 Class name of the entity to create or update (e.g. TinyKangaroo):
 > Company

 Mark this class as an API Platform resource (expose a CRUD API for it) (yes/no) [no]:
 >

 Add the ability to broadcast entity updates using Symfony UX Turbo? (yes/no) [no]:
 >

 created: src/Entity/Company.php
 created: src/Repository/CompanyRepository.php

 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > name

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Company.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > CIF

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Company.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > createDate 

 Field type (enter ? to see all types) [string]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Company.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 >


 
  Success! 
 

 Next: When you're ready, create a migration with php bin/console make:migration

PS C:\Users\Jacin\nuevo_proyecto> php bin/console make:crud  

 The class name of the entity to create CRUD (e.g. DeliciousElephant):
 > User

 Choose a name for your controller class (e.g. UserController) [UserController]:
 >

 Do you want to generate PHPUnit tests? [Experimental] (yes/no) [no]:
 >

 created: src/Controller/UserController.php
 created: src/Form/UserType.php
 created: templates/user/_delete_form.html.twig
 created: templates/user/_form.html.twig
 created: templates/user/edit.html.twig
 created: templates/user/index.html.twig
 created: templates/user/new.html.twig
 created: templates/user/show.html.twig

 
  Success! 
 

 Next: Check your new CRUD by going to /user/
PS C:\Users\Jacin\nuevo_proyecto> php bin/console make:crud

 The class name of the entity to create CRUD (e.g. OrangeChef):
 > Company

 Choose a name for your controller class (e.g. CompanyController) [CompanyController]:
 >

 Do you want to generate PHPUnit tests? [Experimental] (yes/no) [no]:
 >

 created: src/Controller/CompanyController.php
 created: src/Form/CompanyType.php
 created: templates/company/_delete_form.html.twig
 created: templates/company/_form.html.twig
 created: templates/company/edit.html.twig
 created: templates/company/index.html.twig
 created: templates/company/new.html.twig
 created: templates/company/show.html.twig

 
  Success! 
 

 Next: Check your new CRUD by going to /company/
PS C:\Users\Jacin\nuevo_proyecto> php bin/console make:migration


 [WARNING] You have 2 available migrations to execute.                 
                                                                       

 Are you sure you wish to continue? (yes/no) [yes]:
 >

 created: migrations/Version20250108112456.php

 
  Success! 
 

 Review the new migration then run it with php bin/console doctrine:migrations:migrate
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html
PS C:\Users\Jacin\nuevo_proyecto> php bin/console doctrine:schema:update --complete --force


 [WARNING] The --complete option is a no-op, is deprecated and will be 
           removed in Doctrine ORM 4.0.                                
                                                                       

 Updating database schema...

     3 queries were executed

                                                                       
 [OK] Database schema updated successfully!  